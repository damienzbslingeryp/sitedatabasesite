const mongoose = require('mongoose');
const fs = require('fs');
const path = require('path');

// MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
const MONGODB_URI = 'mongodb://localhost:27017/site-manager';

// –°—Ö–µ–º–∞ —Å–∞–π—Ç–∞
const siteSchema = new mongoose.Schema({
    siteId: { type: Number, required: true, unique: true },
    name: { type: String, required: true },
    url: { type: String, default: '' },
    status: { 
        type: String, 
        enum: ['general', '2fa', 'good', 'archive'],
        default: 'general' 
    },
    comment: { type: String, default: '' },
    prefix: { type: String, default: '' },
    credentials: {
        login: { type: String, default: '' },
        password: { type: String, default: '' }
    },
    dateAdded: { type: Date, default: Date.now },
    lastModified: { type: Date, default: Date.now },
    modifiedBy: { type: String, default: 'system' }
});

const Site = mongoose.model('Site', siteSchema);

async function importData() {
    try {
        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
        await mongoose.connect(MONGODB_URI, {
            useNewUrlParser: true,
            useUnifiedTopology: true
        });
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        const initialCount = await Site.countDocuments();
        console.log(`üìä –ó–∞–ø–∏—Å–µ–π –≤ –ë–î –¥–æ –∏–º–ø–æ—Ä—Ç–∞: ${initialCount}`);

        // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        const filePath = path.join(__dirname, 'paste.txt');
        console.log(`üìÇ –ß–∏—Ç–∞—é —Ñ–∞–π–ª: ${filePath}`);
        const content = fs.readFileSync(filePath, 'utf8');
        
        console.log('üîç –ò–∑–≤–ª–µ–∫–∞—é –¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç–æ–≤...');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID –∏ –Ω–∞–∑–≤–∞–Ω–∏–π
        const idPattern = /"id":(\d+),"name":"([^"]+)"/g;
        const institutions = new Map();
        let match;
        
        while ((match = idPattern.exec(content)) !== null) {
            const id = parseInt(match[1]);
            const name = match[2];
            
            if (!institutions.has(id)) {
                institutions.set(id, { id, name, url: '' });
            }
        }
        
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç–∏—Ç—É—Ç–æ–≤: ${institutions.size}`);
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∞—Å—Å–∏–≤
        const institutionsArray = Array.from(institutions.values());
        
        console.log(`\nüöÄ –ù–∞—á–∏–Ω–∞—é –∏–º–ø–æ—Ä—Ç...`);
        console.log('üí° –ü—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 10 –∑–∞–ø–∏—Å–µ–π\n');
        
        const results = {
            added: 0,
            duplicates: 0,
            errors: 0
        };
        
        const startTime = Date.now();
        let processed = 0;
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        const batchSize = 100;
        
        for (let i = 0; i < institutionsArray.length; i += batchSize) {
            const batch = institutionsArray.slice(i, i + batchSize);
            
            for (const inst of batch) {
                try {
                    processed++;
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –∑–∞–ø–∏—Å–µ–π –≤ –Ω–∞—á–∞–ª–µ, –ø–æ—Ç–æ–º —Ä–µ–∂–µ
                    if (processed <= 100 && processed % 10 === 0) {
                        console.log(`‚è≥ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processed}/${institutionsArray.length}`);
                    } else if (processed % 100 === 0) {
                        const elapsed = (Date.now() - startTime) / 1000;
                        const rate = processed / elapsed;
                        const percent = Math.round(processed/institutionsArray.length*100);
                        console.log(`‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å: ${processed}/${institutionsArray.length} (${percent}%) - –°–∫–æ—Ä–æ—Å—Ç—å: ${Math.round(rate)} –∑–∞–ø–∏—Å–µ–π/—Å–µ–∫`);
                    }
                    
                    // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
                    const exists = await Site.exists({ siteId: inst.id });
                    
                    if (!exists) {
                        await Site.create({
                            siteId: inst.id,
                            name: inst.name,
                            url: ''
                        });
                        results.added++;
                        
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ
                        if (results.added <= 3) {
                            console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: "${inst.name}" (ID: ${inst.id})`);
                        }
                    } else {
                        results.duplicates++;
                    }
                } catch (error) {
                    results.errors++;
                    if (results.errors <= 3) {
                        console.error(`‚ùå –û—à–∏–±–∫–∞ ID ${inst.id}: ${error.message}`);
                    }
                }
            }
            
            // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
            if (i + batchSize < institutionsArray.length) {
                await new Promise(resolve => setTimeout(resolve, 10));
            }
        }
        
        const totalTime = (Date.now() - startTime) / 1000;
        const finalCount = await Site.countDocuments();
        
        console.log('\n' + '='.repeat(50));
        console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ú–ü–û–†–¢–ê:');
        console.log('='.repeat(50));
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö: ${results.added}`);
        console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${results.duplicates}`);
        console.log(`‚ùå –û—à–∏–±–æ–∫: ${results.errors}`);
        console.log(`üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î: ${finalCount} (–±—ã–ª–æ ${initialCount})`);
        console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${Math.round(totalTime)} —Å–µ–∫`);
        console.log('='.repeat(50));
        
        console.log('\n‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
        process.exit(0);
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º
console.log('üöÄ –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n');
importData();
