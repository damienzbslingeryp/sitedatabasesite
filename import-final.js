const mongoose = require('mongoose');
const fs = require('fs');
const path = require('path');

// MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
const MONGODB_URI = 'mongodb://localhost:27017/site-manager';

// –°—Ö–µ–º–∞ —Å–∞–π—Ç–∞
const siteSchema = new mongoose.Schema({
    siteId: { type: Number, required: true, unique: true },
    name: { type: String, required: true },
    url: { type: String, default: '' },
    status: { 
        type: String, 
        enum: ['general', '2fa', 'good', 'archive'],
        default: 'general' 
    },
    comment: { type: String, default: '' },
    prefix: { type: String, default: '' },
    credentials: {
        login: { type: String, default: '' },
        password: { type: String, default: '' }
    },
    dateAdded: { type: Date, default: Date.now },
    lastModified: { type: Date, default: Date.now },
    modifiedBy: { type: String, default: 'system' }
});

const Site = mongoose.model('Site', siteSchema);

async function importData() {
    try {
        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
        await mongoose.connect(MONGODB_URI, {
            useNewUrlParser: true,
            useUnifiedTopology: true
        });
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');

        // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        const filePath = path.join(__dirname, 'paste.txt');
        console.log(`üìÇ –ß–∏—Ç–∞—é —Ñ–∞–π–ª: ${filePath}`);
        const content = fs.readFileSync(filePath, 'utf8');
        
        console.log('üîç –ò–∑–≤–ª–µ–∫–∞—é –¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç–æ–≤...');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID –∏ –Ω–∞–∑–≤–∞–Ω–∏–π
        const idPattern = /"id":(\d+),"name":"([^"]+)"/g;
        const institutions = new Map(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º Map –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ ID
        let match;
        
        // –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ ID –∏ –Ω–∞–∑–≤–∞–Ω–∏—è
        while ((match = idPattern.exec(content)) !== null) {
            const id = parseInt(match[1]);
            const name = match[2];
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ ID
            if (!institutions.has(id)) {
                institutions.set(id, { id, name, url: '' });
            }
        }
        
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç–∏—Ç—É—Ç–æ–≤: ${institutions.size}`);
        
        // –¢–µ–ø–µ—Ä—å –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ URL –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞
        // –°–æ–∑–¥–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ URL –ø–æ—Å–ª–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ ID
        institutions.forEach((inst, id) => {
            // –ò—â–µ–º –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ —ç—Ç–æ–≥–æ ID
            const idIndex = content.indexOf(`"id":${id},`);
            if (idIndex !== -1) {
                // –ò—â–µ–º URL –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Å–ª–µ–¥—É—é—â–∏—Ö 2000 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ—Å–ª–µ ID
                const searchArea = content.substring(idIndex, Math.min(idIndex + 2000, content.length));
                
                // –ò—â–µ–º urlLogonApp
                const urlLogonMatch = searchArea.match(/"urlLogonApp":"([^"]+)"/);
                if (urlLogonMatch) {
                    inst.url = urlLogonMatch[1];
                } else {
                    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ urlLogonApp, –∏—â–µ–º urlHomeApp
                    const urlHomeMatch = searchArea.match(/"urlHomeApp":"([^"]+)"/);
                    if (urlHomeMatch) {
                        inst.url = urlHomeMatch[1];
                    }
                }
            }
        });
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Map –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
        const institutionsArray = Array.from(institutions.values());
        
        console.log(`\nüöÄ –ù–∞—á–∏–Ω–∞—é –∏–º–ø–æ—Ä—Ç ${institutionsArray.length} –∏–Ω—Å—Ç–∏—Ç—É—Ç–æ–≤...`);
        console.log('‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...\n');
        
        const results = {
            added: 0,
            duplicates: 0,
            errors: 0
        };
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 –∑–∞–ø–∏—Å–µ–π
        let processed = 0;
        const startTime = Date.now();
        
        for (const inst of institutionsArray) {
            try {
                processed++;
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                if (processed % 100 === 0) {
                    const elapsed = (Date.now() - startTime) / 1000;
                    const rate = processed / elapsed;
                    const remaining = (institutionsArray.length - processed) / rate;
                    console.log(`‚è≥ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processed}/${institutionsArray.length} (${Math.round(processed/institutionsArray.length*100)}%) - –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ ${Math.round(remaining)} —Å–µ–∫`);
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Å–∞–π—Ç
                const exists = await Site.findOne({ siteId: inst.id });
                
                if (!exists) {
                    const newSite = new Site({
                        siteId: inst.id,
                        name: inst.name,
                        url: inst.url || ''
                    });
                    
                    await newSite.save();
                    results.added++;
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                    if (results.added <= 5) {
                        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: ${newSite.name} (ID: ${newSite.siteId})`);
                    }
                } else {
                    results.duplicates++;
                }
            } catch (error) {
                results.errors++;
                if (results.errors <= 5) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ ID ${inst.id}: ${error.message}`);
                }
            }
        }
        
        const totalTime = (Date.now() - startTime) / 1000;
        
        // –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        console.log('\n' + '='.repeat(50));
        console.log('üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ú–ü–û–†–¢–ê:');
        console.log('='.repeat(50));
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${results.added} —Å–∞–π—Ç–æ–≤`);
        console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${results.duplicates}`);
        console.log(`‚ùå –û—à–∏–±–æ–∫ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: ${results.errors}`);
        console.log(`‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: ${Math.round(totalTime)} —Å–µ–∫—É–Ω–¥`);
        console.log(`üìà –°–∫–æ—Ä–æ—Å—Ç—å: ${Math.round(processed/totalTime)} –∑–∞–ø–∏—Å–µ–π/—Å–µ–∫`);
        console.log('='.repeat(50));
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤
        if (results.added > 0) {
            console.log('\nüìã –ü—Ä–∏–º–µ—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤:');
            const samples = await Site.find().sort({ dateAdded: -1 }).limit(10);
            samples.forEach((site, i) => {
                console.log(`${i + 1}. ${site.name} (ID: ${site.siteId})`);
                if (site.url) console.log(`   URL: ${site.url}`);
            });
        }
        
        console.log('\n‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
        process.exit(0);
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç
console.log('üöÄ –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞ –∏–Ω—Å—Ç–∏—Ç—É—Ç–æ–≤ –∏–∑ paste.txt\n');
importData();
