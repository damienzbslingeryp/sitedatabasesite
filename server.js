const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const bodyParser = require('body-parser');
const http = require('http');
const socketIo = require('socket.io');
const path = require('path');
require('dotenv').config();

const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
    cors: {
        origin: "*",
        methods: ["GET", "POST", "PUT", "DELETE"]
    }
});

// Middleware
app.use(cors());
app.use(bodyParser.json({ limit: '50mb' }));
app.use(bodyParser.urlencoded({ extended: true, limit: '50mb' }));
app.use(express.static('public'));

// MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/site-manager';

mongoose.connect(MONGODB_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true
}).then(() => {
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');
}).catch(err => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err);
});

// –°—Ö–µ–º–∞ —Å–∞–π—Ç–∞
const siteSchema = new mongoose.Schema({
    siteId: { type: Number, required: true, unique: true },
    name: { type: String, required: true },
    url: { type: String, default: '' },
    status: { 
        type: String, 
        enum: ['general', '2fa', 'good', 'archive'],
        default: 'general' 
    },
    comment: { type: String, default: '' },
    prefix: { type: String, default: '' },
    credentials: {
        login: { type: String, default: '' },
        password: { type: String, default: '' }
    },
    dateAdded: { type: Date, default: Date.now },
    lastModified: { type: Date, default: Date.now },
    modifiedBy: { type: String, default: 'system' }
});

// –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
siteSchema.index({ status: 1 });
siteSchema.index({ status: 1, dateAdded: -1 });
siteSchema.index({ name: 'text', url: 'text' });

const Site = mongoose.model('Site', siteSchema);

// –°—Ö–µ–º–∞ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤
const prefixSchema = new mongoose.Schema({
    name: { type: String, required: true, unique: true },
    color: { type: String, required: true }
});

const Prefix = mongoose.model('Prefix', prefixSchema);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
async function initializePrefixes() {
    const defaultPrefixes = [
        { name: 'Plaid', color: '#3498db' },
        { name: 'Finicity', color: '#27ae60' },
        { name: 'Yodlee', color: '#e74c3c' }
    ];

    try {
        for (const prefix of defaultPrefixes) {
            await Prefix.findOneAndUpdate(
                { name: prefix.name },
                prefix,
                { upsert: true, new: true }
            );
        }
        console.log('‚úÖ –ü—Ä–µ—Ñ–∏–∫—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤:', error);
    }
}

initializePrefixes();

// Socket.IO –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
io.on('connection', (socket) => {
    console.log('üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    socket.emit('welcome', { message: '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É' });

    socket.on('disconnect', () => {
        console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–µ–Ω');
    });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
function notifyAllClients(event, data = {}) {
    io.emit(event, data);
}

// –ö—ç—à –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
let statsCache = null;
let statsCacheTime = 0;
const STATS_CACHE_TTL = 5000; // 5 —Å–µ–∫—É–Ω–¥

// API –º–∞—Ä—à—Ä—É—Ç—ã

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∞–π—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
app.get('/api/sites/optimized', async (req, res) => {
    try {
        const { 
            status = 'general', 
            page = 1, 
            limit = 50,
            search = ''
        } = req.query;
        
        const pageNum = parseInt(page);
        const limitNum = parseInt(limit);
        const skip = (pageNum - 1) * limitNum;
        
        // –°—Ç—Ä–æ–∏–º –∑–∞–ø—Ä–æ—Å
        let query = { status };
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∏—Å–∫
        if (search) {
            query.$or = [
                { siteId: isNaN(search) ? -1 : parseInt(search) },
                { name: { $regex: search, $options: 'i' } },
                { url: { $regex: search, $options: 'i' } }
            ];
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        const [sites, total] = await Promise.all([
            Site.find(query)
                .sort({ dateAdded: -1 })
                .skip(skip)
                .limit(limitNum)
                .lean(), // lean() –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            Site.countDocuments(query)
        ]);
        
        res.json({
            sites,
            pagination: {
                total,
                page: pageNum,
                limit: limitNum,
                pages: Math.ceil(total / limitNum)
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ optimized endpoint:', error);
        res.status(500).json({ error: error.message });
    }
});

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
app.get('/api/stats/cached', async (req, res) => {
    try {
        const now = Date.now();
        
        // –ï—Å–ª–∏ –∫—ç—à –µ—â–µ –∞–∫—Ç—É–∞–ª–µ–Ω
        if (statsCache && (now - statsCacheTime) < STATS_CACHE_TTL) {
            return res.json(statsCache);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        const stats = await Site.aggregate([
            {
                $group: {
                    _id: '$status',
                    count: { $sum: 1 }
                }
            }
        ]);
        
        const result = {
            total: 0,
            general: 0,
            '2fa': 0,
            good: 0,
            archive: 0
        };
        
        stats.forEach(stat => {
            result[stat._id] = stat.count;
            result.total += stat.count;
        });
        
        statsCache = result;
        statsCacheTime = now;
        
        res.json(result);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
app.get('/api/sites/initial', async (req, res) => {
    try {
        const limit = 50; // –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 50 –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        
        const sites = await Site.find({ status: 'general' })
            .sort({ dateAdded: -1 })
            .limit(limit)
            .select('siteId name url status prefix comment credentials') // –¢–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
            .lean();
        
        res.json(sites);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–∞–π—Ç—ã (—Å—Ç–∞—Ä—ã–π endpoint –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
app.get('/api/sites', async (req, res) => {
    try {
        const sites = await Site.find().sort({ dateAdded: -1 }).lean();
        res.json(sites);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Å–∞–π—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞
app.post('/api/sites/import', async (req, res) => {
    try {
        const { content } = req.body;
        const results = { added: 0, duplicates: 0, errors: 0 };
        const newSites = [];

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö –∏–Ω—Å—Ç–∏—Ç—É—Ç–æ–≤
        const idPattern = /"id":(\d+),"name":"([^"]+)"/g;
        const matches = [];
        let match;
        
        while ((match = idPattern.exec(content)) !== null) {
            matches.push({
                id: parseInt(match[1]),
                name: match[2]
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ ID
        const uniqueInstitutions = new Map();
        matches.forEach(inst => {
            if (!uniqueInstitutions.has(inst.id)) {
                uniqueInstitutions.set(inst.id, inst);
            }
        });

        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Å—Ç–∏—Ç—É—Ç—ã
        for (const inst of uniqueInstitutions.values()) {
            try {
                const exists = await Site.findOne({ siteId: inst.id });
                if (!exists) {
                    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ URL
                    const idIndex = content.indexOf(`"id":${inst.id},`);
                    let url = '';
                    
                    if (idIndex !== -1) {
                        const searchArea = content.substring(idIndex, Math.min(idIndex + 2000, content.length));
                        const urlLogonMatch = searchArea.match(/"urlLogonApp":"([^"]+)"/);
                        if (urlLogonMatch) {
                            url = urlLogonMatch[1];
                        } else {
                            const urlHomeMatch = searchArea.match(/"urlHomeApp":"([^"]+)"/);
                            if (urlHomeMatch) {
                                url = urlHomeMatch[1];
                            }
                        }
                    }

                    const newSite = new Site({
                        siteId: inst.id,
                        name: inst.name,
                        url: url
                    });
                    
                    await newSite.save();
                    newSites.push(newSite);
                    results.added++;
                } else {
                    results.duplicates++;
                }
            } catch (e) {
                results.errors++;
            }
        }

        if (newSites.length > 0) {
            notifyAllClients('sitesUpdated', { action: 'import', count: newSites.length });
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            statsCache = null;
        }

        res.json({ 
            success: true, 
            results,
            sites: newSites 
        });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// –û–±–Ω–æ–≤–∏—Ç—å —Å–∞–π—Ç
app.put('/api/sites/:id', async (req, res) => {
    try {
        const updates = {
            ...req.body,
            lastModified: new Date()
        };
        
        const site = await Site.findOneAndUpdate(
            { siteId: parseInt(req.params.id) },
            updates,
            { new: true }
        );
        
        if (!site) {
            return res.status(404).json({ error: '–°–∞–π—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        notifyAllClients('siteUpdated', { site });
        statsCache = null; // –°–±—Ä–æ—Å –∫—ç—à–∞
        res.json(site);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Å–∞–π—Ç –≤ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
app.put('/api/sites/:id/move', async (req, res) => {
    try {
        const { status } = req.body;
        const site = await Site.findOneAndUpdate(
            { siteId: parseInt(req.params.id) },
            { 
                status,
                lastModified: new Date()
            },
            { new: true }
        );
        
        if (!site) {
            return res.status(404).json({ error: '–°–∞–π—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        notifyAllClients('siteUpdated', { site });
        statsCache = null; // –°–±—Ä–æ—Å –∫—ç—à–∞
        res.json(site);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
app.put('/api/sites/:id/comment', async (req, res) => {
    try {
        const { comment } = req.body;
        const site = await Site.findOneAndUpdate(
            { siteId: parseInt(req.params.id) },
            { 
                comment,
                lastModified: new Date()
            },
            { new: true }
        );
        
        if (!site) {
            return res.status(404).json({ error: '–°–∞–π—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        notifyAllClients('siteUpdated', { site });
        res.json(site);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// –î–æ–±–∞–≤–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
app.put('/api/sites/:id/credentials', async (req, res) => {
    try {
        const { login, password } = req.body;
        const site = await Site.findOneAndUpdate(
            { siteId: parseInt(req.params.id) },
            { 
                credentials: { login, password },
                lastModified: new Date()
            },
            { new: true }
        );
        
        if (!site) {
            return res.status(404).json({ error: '–°–∞–π—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        notifyAllClients('siteUpdated', { site });
        res.json(site);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å
app.put('/api/sites/:id/prefix', async (req, res) => {
    try {
        const { prefix } = req.body;
        const site = await Site.findOneAndUpdate(
            { siteId: parseInt(req.params.id) },
            { 
                prefix,
                lastModified: new Date()
            },
            { new: true }
        );
        
        if (!site) {
            return res.status(404).json({ error: '–°–∞–π—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        notifyAllClients('siteUpdated', { site });
        res.json(site);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã
app.get('/api/prefixes', async (req, res) => {
    try {
        const prefixes = await Prefix.find();
        res.json(prefixes);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å
app.post('/api/prefixes', async (req, res) => {
    try {
        const { name, color } = req.body;
        const prefix = new Prefix({ name, color });
        await prefix.save();
        
        notifyAllClients('prefixesUpdated');
        res.json(prefix);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å
app.put('/api/prefixes/:oldName', async (req, res) => {
    try {
        const { name, color } = req.body;
        const oldName = req.params.oldName;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
        await Prefix.findOneAndUpdate(
            { name: oldName },
            { name, color }
        );
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å —É –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤
        if (oldName !== name) {
            await Site.updateMany(
                { prefix: oldName },
                { prefix: name }
            );
        }
        
        notifyAllClients('prefixesUpdated');
        notifyAllClients('sitesUpdated');
        res.json({ success: true });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å
app.delete('/api/prefixes/:name', async (req, res) => {
    try {
        await Prefix.deleteOne({ name: req.params.name });
        
        // –£–±—Ä–∞—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å —É –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤
        await Site.updateMany(
            { prefix: req.params.name },
            { prefix: '' }
        );
        
        notifyAllClients('prefixesUpdated');
        notifyAllClients('sitesUpdated');
        res.json({ success: true });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—Å—Ç–∞—Ä—ã–π endpoint)
app.get('/api/stats', async (req, res) => {
    try {
        const stats = {
            total: await Site.countDocuments(),
            general: await Site.countDocuments({ status: 'general' }),
            '2fa': await Site.countDocuments({ status: '2fa' }),
            good: await Site.countDocuments({ status: 'good' }),
            archive: await Site.countDocuments({ status: 'archive' })
        };
        res.json(stats);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// Health check endpoint
app.get('/api/health', (req, res) => {
    res.json({ 
        status: 'ok', 
        timestamp: new Date(),
        mongodb: mongoose.connection.readyState === 1 ? 'connected' : 'disconnected'
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).json({ error: '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!' });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üìç –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:${PORT} –≤ –±—Ä–∞—É–∑–µ—Ä–µ`);
});