const mongoose = require('mongoose');
const fs = require('fs');
const path = require('path');

// MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
const MONGODB_URI = 'mongodb://localhost:27017/site-manager';

// –°—Ö–µ–º–∞ —Å–∞–π—Ç–∞
const siteSchema = new mongoose.Schema({
    siteId: { type: Number, required: true, unique: true },
    name: { type: String, required: true },
    url: { type: String, default: '' },
    status: { 
        type: String, 
        enum: ['general', '2fa', 'good', 'archive'],
        default: 'general' 
    },
    comment: { type: String, default: '' },
    prefix: { type: String, default: '' },
    credentials: {
        login: { type: String, default: '' },
        password: { type: String, default: '' }
    },
    dateAdded: { type: Date, default: Date.now },
    lastModified: { type: Date, default: Date.now },
    modifiedBy: { type: String, default: 'system' }
});

const Site = mongoose.model('Site', siteSchema);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è JSON –æ–±—ä–µ–∫—Ç–æ–≤
function extractJsonObjects(content) {
    const objects = [];
    let currentPos = 0;
    
    while (currentPos < content.length) {
        // –ò—â–µ–º –Ω–∞—á–∞–ª–æ –æ–±—ä–µ–∫—Ç–∞
        const startIndex = content.indexOf('{"institution":', currentPos);
        if (startIndex === -1) break;
        
        // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü –æ–±—ä–µ–∫—Ç–∞, —Å—á–∏—Ç–∞—è —Ñ–∏–≥—É—Ä–Ω—ã–µ —Å–∫–æ–±–∫–∏
        let depth = 0;
        let inString = false;
        let escape = false;
        let endIndex = -1;
        
        for (let i = startIndex; i < content.length; i++) {
            const char = content[i];
            
            if (!escape) {
                if (char === '"') inString = !inString;
                else if (!inString) {
                    if (char === '{') depth++;
                    else if (char === '}') {
                        depth--;
                        if (depth === 0) {
                            endIndex = i;
                            break;
                        }
                    }
                }
                escape = (char === '\\');
            } else {
                escape = false;
            }
        }
        
        if (endIndex !== -1) {
            const jsonStr = content.substring(startIndex, endIndex + 1);
            objects.push(jsonStr);
            currentPos = endIndex + 1;
        } else {
            break;
        }
    }
    
    return objects;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
function safeJsonParse(jsonStr) {
    try {
        // –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
        let cleaned = jsonStr;
        
        // –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        cleaned = cleaned.replace(/\{"institution":\s*false/g, '{"institution":null');
        cleaned = cleaned.replace(/:\s*false/g, ':null');
        cleaned = cleaned.replace(/:\s*true/g, ':true');
        
        // –£–±–∏—Ä–∞–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –≤ –∫–æ–Ω—Ü–µ
        const lastComplete = cleaned.lastIndexOf('}}');
        if (lastComplete !== -1) {
            cleaned = cleaned.substring(0, lastComplete + 2);
        }
        
        return JSON.parse(cleaned);
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', e.message);
        return null;
    }
}

async function importData() {
    try {
        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
        await mongoose.connect(MONGODB_URI, {
            useNewUrlParser: true,
            useUnifiedTopology: true
        });
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');

        // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        const filePath = path.join(__dirname, 'paste.txt');
        console.log(`üìÇ –ß–∏—Ç–∞—é —Ñ–∞–π–ª: ${filePath}`);
        const content = fs.readFileSync(filePath, 'utf8');
        
        console.log('üîç –ò–∑–≤–ª–µ–∫–∞—é JSON –æ–±—ä–µ–∫—Ç—ã...');
        const jsonObjects = extractJsonObjects(content);
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ JSON –æ–±—ä–µ–∫—Ç–æ–≤: ${jsonObjects.length}`);
        
        const results = {
            added: 0,
            duplicates: 0,
            errors: 0,
            institutions: []
        };

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π JSON –æ–±—ä–µ–∫—Ç
        for (let i = 0; i < jsonObjects.length; i++) {
            console.log(`\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ä–µ–∫—Ç–∞ ${i + 1}/${jsonObjects.length}`);
            
            const parsed = safeJsonParse(jsonObjects[i]);
            if (!parsed || !parsed.institution) {
                console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ–±—ä–µ–∫—Ç');
                results.errors++;
                continue;
            }
            
            const inst = parsed.institution;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if (!inst.id || !inst.name) {
                console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (id –∏–ª–∏ name)');
                results.errors++;
                continue;
            }
            
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Å–∞–π—Ç
                const exists = await Site.findOne({ siteId: inst.id });
                
                if (!exists) {
                    const newSite = new Site({
                        siteId: inst.id,
                        name: inst.name,
                        url: inst.urlLogonApp || inst.urlHomeApp || ''
                    });
                    
                    await newSite.save();
                    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: ${newSite.name} (ID: ${newSite.siteId})`);
                    results.added++;
                    results.institutions.push({
                        id: inst.id,
                        name: inst.name,
                        url: newSite.url
                    });
                } else {
                    console.log(`‚ö†Ô∏è  –î—É–±–ª–∏–∫–∞—Ç: ${inst.name} (ID: ${inst.id})`);
                    results.duplicates++;
                }
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: ${error.message}`);
                results.errors++;
            }
        }

        // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        console.log('\nüìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö —Å–∞–π—Ç–æ–≤: ${results.added}`);
        console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${results.duplicates}`);
        console.log(`‚ùå –û—à–∏–±–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${results.errors}`);
        
        if (results.institutions.length > 0) {
            console.log('\nüìã –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç—ã:');
            results.institutions.forEach(inst => {
                console.log(`   - ${inst.name} (ID: ${inst.id})`);
                if (inst.url) console.log(`     URL: ${inst.url}`);
            });
        }

        console.log('\n‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
        process.exit(0);
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç
importData();
