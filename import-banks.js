const mongoose = require('mongoose');
const fs = require('fs').promises;
const path = require('path');
const readline = require('readline');

// MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
const MONGODB_URI = 'mongodb://localhost:27017/site-manager';

// –°—Ö–µ–º–∞ —Å–∞–π—Ç–∞
const siteSchema = new mongoose.Schema({
    siteId: { type: Number, required: true, unique: true },
    name: { type: String, required: true },
    url: { type: String, default: '' },
    status: { 
        type: String, 
        enum: ['general', '2fa', 'good', 'archive'],
        default: 'general' 
    },
    comment: { type: String, default: '' },
    prefix: { type: String, default: '' },
    credentials: {
        login: { type: String, default: '' },
        password: { type: String, default: '' }
    },
    dateAdded: { type: Date, default: Date.now },
    lastModified: { type: Date, default: Date.now },
    modifiedBy: { type: String, default: 'system' }
});

const Site = mongoose.model('Site', siteSchema);

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

const question = (query) => new Promise((resolve) => rl.question(query, resolve));

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Å—Ç–∏—Ç—É—Ç–æ–≤
function extractInstitutionsFromJSON(content) {
    const institutions = [];
    const seen = new Set();
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ JSON –æ–±—ä–µ–∫—Ç—ã
    // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω {"institution":{...}}
    const jsonPattern = /\{"institution":\{[^{}]*(?:\{[^{}]*\}[^{}]*)*\}/g;
    const matches = content.match(jsonPattern) || [];
    
    console.log(`\nüîç –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö JSON –±–ª–æ–∫–æ–≤: ${matches.length}`);
    
    for (const match of matches) {
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –≤ –∫–∞–∂–¥–æ–º –±–ª–æ–∫–µ
            const idMatch = match.match(/"id":(\d+)/);
            const nameMatch = match.match(/"name":"([^"]+)"/);
            const urlHomeMatch = match.match(/"urlHomeApp":"([^"]+)"/);
            const urlLogonMatch = match.match(/"urlLogonApp":"([^"]+)"/);
            
            if (idMatch && nameMatch) {
                const id = parseInt(idMatch[1]);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
                if (!seen.has(id)) {
                    seen.add(id);
                    
                    const institution = {
                        id: id,
                        name: nameMatch[1],
                        url: urlHomeMatch ? urlHomeMatch[1] : (urlLogonMatch ? urlLogonMatch[1] : '')
                    };
                    
                    institutions.push(institution);
                }
            }
        } catch (e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –±–ª–æ–∫–æ–≤
        }
    }
    
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    if (institutions.length === 0) {
        console.log('\n‚ö†Ô∏è  –ü–µ—Ä–≤—ã–π –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π...');
        
        // –ò—â–µ–º –≤—Å–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ id, name –∏ url
        const lines = content.split('\n');
        
        for (const line of lines) {
            const idMatch = line.match(/"id":(\d+)/);
            const nameMatch = line.match(/"name":"([^"]+)"/);
            const urlHomeMatch = line.match(/"urlHomeApp":"([^"]+)"/);
            const urlLogonMatch = line.match(/"urlLogonApp":"([^"]+)"/);
            
            if (idMatch && nameMatch) {
                const id = parseInt(idMatch[1]);
                
                if (!seen.has(id)) {
                    seen.add(id);
                    
                    institutions.push({
                        id: id,
                        name: nameMatch[1],
                        url: urlHomeMatch ? urlHomeMatch[1] : (urlLogonMatch ? urlLogonMatch[1] : '')
                    });
                }
            }
        }
    }
    
    return institutions;
}

async function main() {
    try {
        console.log('üîß –ò–ú–ü–û–†–¢ –ë–ê–ù–ö–û–í –° –ü–†–ê–í–ò–õ–¨–ù–´–ú –ò–ó–í–õ–ï–ß–ï–ù–ò–ï–ú URL\n');
        
        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
        await mongoose.connect(MONGODB_URI, {
            useNewUrlParser: true,
            useUnifiedTopology: true
        });
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        const currentCount = await Site.countDocuments();
        console.log(`\nüìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${currentCount.toLocaleString()}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
        const filePath = path.join(__dirname, 'paste.txt');
        try {
            await fs.access(filePath);
            console.log('‚úÖ –§–∞–π–ª paste.txt –Ω–∞–π–¥–µ–Ω');
        } catch {
            console.log('\n‚ùå –§–∞–π–ª paste.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            console.log('   –ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª –≤: ' + filePath);
            process.exit(1);
        }

        // –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        console.log('\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í—Å–µ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –£–î–ê–õ–ï–ù–´!');
        const answer = await question('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ');
        
        if (answer.toLowerCase() !== 'yes') {
            console.log('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
            process.exit(0);
        }

        // –£–î–ê–õ–Ø–ï–ú –í–°–ï –î–ê–ù–ù–´–ï
        console.log('\nüóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö...');
        await Site.deleteMany({});
        console.log('‚úÖ –ë–∞–∑–∞ –æ—á–∏—â–µ–Ω–∞');

        // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        console.log('\nüî® –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...');
        await Site.collection.createIndex({ status: 1 });
        await Site.collection.createIndex({ status: 1, dateAdded: -1 });
        await Site.collection.createIndex({ siteId: 1 }, { unique: true });
        await Site.collection.createIndex({ name: 'text', url: 'text' });
        console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã');

        // –ß–ò–¢–ê–ï–ú –ò –ü–ê–†–°–ò–ú –§–ê–ô–õ
        console.log('\nüì• –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ paste.txt...');
        const content = await fs.readFile(filePath, 'utf8');
        console.log(`üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${(content.length / 1024 / 1024).toFixed(2)} MB`);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        console.log('\nüìÑ –ü—Ä–∏–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞:');
        console.log(content.substring(0, 500) + '...\n');

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Å—Ç–∏—Ç—É—Ç—ã
        console.log('üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç–æ–≤...');
        const institutions = extractInstitutionsFromJSON(content);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç–∏—Ç—É—Ç–æ–≤: ${institutions.length}`);

        if (institutions.length === 0) {
            console.log('\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Å—Ç–∏—Ç—É—Ç—ã –≤ —Ñ–∞–π–ª–µ!');
            console.log('   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.');
            process.exit(1);
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
        console.log('\nüìã –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç–∏—Ç—É—Ç–æ–≤:');
        const examples = institutions.slice(0, 10);
        examples.forEach((inst, i) => {
            console.log(`\n${i + 1}. ${inst.name}`);
            console.log(`   ID: ${inst.id}`);
            console.log(`   URL: ${inst.url || '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}`);
        });

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ URL
        const withUrls = institutions.filter(inst => inst.url).length;
        console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ URL:`);
        console.log(`   ‚úÖ –° URL: ${withUrls}`);
        console.log(`   ‚ùå –ë–µ–∑ URL: ${institutions.length - withUrls}`);

        const confirm = await question('\nüì• –ù–∞—á–∞—Ç—å –∏–º–ø–æ—Ä—Ç? (yes/no): ');
        if (confirm.toLowerCase() !== 'yes') {
            console.log('‚ùå –ò–º–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω');
            process.exit(0);
        }

        // –ò–ú–ü–û–†–¢–ò–†–£–ï–ú –î–ê–ù–ù–´–ï
        console.log('\nüì¶ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...');
        const batchSize = 500;
        let imported = 0;
        let errors = 0;
        
        for (let i = 0; i < institutions.length; i += batchSize) {
            const batch = institutions.slice(i, i + batchSize);
            
            const documents = batch.map(inst => ({
                siteId: inst.id,
                name: inst.name,
                url: inst.url || '',
                status: 'general',
                dateAdded: new Date(),
                lastModified: new Date()
            }));
            
            try {
                const result = await Site.insertMany(documents, { ordered: false });
                imported += result.length;
            } catch (error) {
                if (error.insertedDocs) {
                    imported += error.insertedDocs.length;
                }
                errors += batch.length - (error.insertedDocs ? error.insertedDocs.length : 0);
            }
            
            // –ü—Ä–æ–≥—Ä–µ—Å—Å
            const progress = Math.round((i + batch.length) / institutions.length * 100);
            process.stdout.write(`\r‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress}% (${imported} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ, ${errors} –æ—à–∏–±–æ–∫)`);
        }

        console.log('\n\n‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
        
        // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const finalCount = await Site.countDocuments();
        const finalWithUrls = await Site.countDocuments({ url: { $ne: '' } });
        
        console.log('\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
        console.log(`‚úÖ –í—Å–µ–≥–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${finalCount.toLocaleString()}`);
        console.log(`üîó –° URL: ${finalWithUrls.toLocaleString()}`);
        console.log(`‚ùå –ë–µ–∑ URL: ${(finalCount - finalWithUrls).toLocaleString()}`);
        console.log(`‚ö†Ô∏è  –û—à–∏–±–æ–∫: ${errors}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
        console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –±–∞–Ω–∫–æ–≤:');
        
        const testIds = [4200, 4173, 177723]; // ID –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
        for (const testId of testIds) {
            const bank = await Site.findOne({ siteId: testId });
            if (bank) {
                console.log(`\n‚úÖ ID ${testId}: ${bank.name}`);
                console.log(`   URL: ${bank.url || '‚ùå –ù–µ —É–∫–∞–∑–∞–Ω'}`);
            } else {
                console.log(`\n‚ùå ID ${testId}: –ù–µ –Ω–∞–π–¥–µ–Ω`);
            }
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã —Å URL
        console.log('\nüìã –°–ª—É—á–∞–π–Ω—ã–µ –±–∞–Ω–∫–∏ —Å URL:');
        const randomWithUrl = await Site.aggregate([
            { $match: { url: { $ne: '' } } },
            { $sample: { size: 5 } }
        ]);
        
        randomWithUrl.forEach((site, i) => {
            console.log(`\n${i + 1}. ${site.name} (ID: ${site.siteId})`);
            console.log(`   URL: ${site.url}`);
        });

        console.log('\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
        console.log('\nüìå –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
        console.log('1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: pm2 restart site-manager');
        console.log('2. –û—á–∏—Å—Ç–∏—Ç–µ –∫—ç—à –±—Ä–∞—É–∑–µ—Ä–∞ (Ctrl+Shift+R)');
        console.log('3. –û—Ç–∫—Ä–æ–π—Ç–µ —Å–∞–π—Ç:');
        console.log('   - –ß–µ—Ä–µ–∑ –ø–æ—Ä—Ç: http://77.91.70.191:3000');
        console.log('   - –ò–ª–∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ Socket.IO –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —á–µ—Ä–µ–∑ nginx');
        
        rl.close();
        process.exit(0);
    } catch (error) {
        console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        rl.close();
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫
console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –∏–º–ø–æ—Ä—Ç–∞ –±–∞–Ω–∫–æ–≤\n');
main();
