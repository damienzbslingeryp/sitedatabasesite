const mongoose = require('mongoose');
const fs = require('fs').promises;
const path = require('path');

// MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/site-manager';

// –°—Ö–µ–º–∞ —Å–∞–π—Ç–∞ (—Ç–∞ –∂–µ, —á—Ç–æ –≤ server.js)
const siteSchema = new mongoose.Schema({
    siteId: { type: Number, required: true, unique: true },
    name: { type: String, required: true },
    url: { type: String, default: '' },
    status: { 
        type: String, 
        enum: ['general', '2fa', 'good', 'archive'],
        default: 'general' 
    },
    comment: { type: String, default: '' },
    prefix: { type: String, default: '' },
    credentials: {
        login: { type: String, default: '' },
        password: { type: String, default: '' }
    },
    dateAdded: { type: Date, default: Date.now },
    lastModified: { type: Date, default: Date.now },
    modifiedBy: { type: String, default: 'system' }
});

const Site = mongoose.model('Site', siteSchema);

// –§—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞
async function importFromFile(filePath) {
    try {
        console.log('üìÇ –ß–∏—Ç–∞—é —Ñ–∞–π–ª:', filePath);
        const content = await fs.readFile(filePath, 'utf8');
        
        console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ...');
        const lines = content.split('\n');
        const results = { added: 0, duplicates: 0, errors: 0 };
        const newSites = [];

        for (const line of lines) {
            try {
                // –ò—â–µ–º JSON –æ–±—ä–µ–∫—Ç—ã –≤ —Å—Ç—Ä–æ–∫–µ
                const jsonMatches = line.match(/\{[^{}]*\{[^{}]*\}[^{}]*\}/g) || line.match(/\{[^}]+\}/g);
                
                if (jsonMatches) {
                    for (const jsonStr of jsonMatches) {
                        try {
                            // –ü—Ä–æ–±—É–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å JSON –µ—Å–ª–∏ –æ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
                            let fixedJson = jsonStr
                                .replace(/(['"])?([a-zA-Z0-9_]+)(['"])?:/g, '"$2":')
                                .replace(/:\s*'([^']*)'/g, ':"$1"')
                                .replace(/,\s*}/g, '}')
                                .replace(/,\s*]/g, ']');
                            
                            const obj = JSON.parse(fixedJson);
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞–Ω–Ω—ã—Ö
                            let siteData = null;
                            
                            // –§–æ—Ä–º–∞—Ç 1: {institution: {id: ..., name: ...}}
                            if (obj.institution && obj.institution.id) {
                                siteData = {
                                    id: obj.institution.id,
                                    name: obj.institution.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
                                    url: obj.institution.urlLogonApp || obj.institution.urlHomeApp || ''
                                };
                            }
                            // –§–æ—Ä–º–∞—Ç 2: {id: ..., name: ...}
                            else if (obj.id) {
                                siteData = {
                                    id: obj.id,
                                    name: obj.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
                                    url: obj.url || obj.urlLogonApp || obj.urlHomeApp || ''
                                };
                            }
                            
                            if (siteData) {
                                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
                                const exists = await Site.findOne({ siteId: siteData.id });
                                if (!exists) {
                                    const newSite = new Site({
                                        siteId: siteData.id,
                                        name: siteData.name,
                                        url: siteData.url,
                                        status: 'general'
                                    });
                                    await newSite.save();
                                    newSites.push(newSite);
                                    results.added++;
                                    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: ${siteData.name} (ID: ${siteData.id})`);
                                } else {
                                    results.duplicates++;
                                }
                            }
                        } catch (e) {
                            // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                            const idMatch = jsonStr.match(/"id"\s*:\s*(\d+)/);
                            const nameMatch = jsonStr.match(/"name"\s*:\s*"([^"]+)"/);
                            const urlMatch = jsonStr.match(/"url(?:LogonApp|HomeApp)?"\s*:\s*"([^"]+)"/);
                            
                            if (idMatch && nameMatch) {
                                const siteData = {
                                    id: parseInt(idMatch[1]),
                                    name: nameMatch[1],
                                    url: urlMatch ? urlMatch[1] : ''
                                };
                                
                                const exists = await Site.findOne({ siteId: siteData.id });
                                if (!exists) {
                                    const newSite = new Site({
                                        siteId: siteData.id,
                                        name: siteData.name,
                                        url: siteData.url,
                                        status: 'general'
                                    });
                                    await newSite.save();
                                    newSites.push(newSite);
                                    results.added++;
                                    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: ${siteData.name} (ID: ${siteData.id})`);
                                } else {
                                    results.duplicates++;
                                }
                            } else {
                                results.errors++;
                            }
                        }
                    }
                }
            } catch (e) {
                results.errors++;
            }
        }

        console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–º–ø–æ—Ä—Ç–∞:');
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö: ${results.added}`);
        console.log(`‚ö†Ô∏è  –î—É–±–ª–∏–∫–∞—Ç–æ–≤: ${results.duplicates}`);
        console.log(`‚ùå –û—à–∏–±–æ–∫: ${results.errors}`);
        
        return results;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error);
        throw error;
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
async function autoImport() {
    try {
        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
        await mongoose.connect(MONGODB_URI, {
            useNewUrlParser: true,
            useUnifiedTopology: true
        });
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');

        // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
        const importFile = path.join(__dirname, 'data-to-import.txt');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        try {
            await fs.access(importFile);
            console.log('üìÑ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞:', importFile);
            
            // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            await importFromFile(importFile);
            
            // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞
            const processedFile = path.join(__dirname, `imported-${Date.now()}.txt`);
            await fs.rename(importFile, processedFile);
            console.log('üìÅ –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤:', processedFile);
            
        } catch (e) {
            console.log('‚ÑπÔ∏è  –§–∞–π–ª data-to-import.txt –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç');
        }

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await mongoose.connection.close();
        console.log('‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞
if (require.main === module) {
    autoImport();
}

module.exports = { importFromFile };
